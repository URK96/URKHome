@using System.Collections.Generic
@using System.IO
@using System.Timers

<BFUStack HorizontalAlign="Alignment.Center">
    <div style="font-size:@ThemeProvider.Theme.FontStyle.FontSize.Large; font-weight:@ThemeProvider.Theme.FontStyle.FontWeight.Light; margin-bottom:10px">Screenshot</div>

    <div id="ScreenshotCarousel" class="carousel slide" data-ride="carousel" @onmouseenter="() => { autoSlideTimer.Stop(); }" @onmouseleave="() => { autoSlideTimer.Start(); }">
        <ol class="carousel-indicators">
            @for (int i = 0; i < imageList.Count; ++i)
            {
                <li data-target="#ScreenshotCarousel" data-slide-to="@i" class="@((selectedIndex == i) ? "active" : "")"></li>
            }
        </ol>
        
        <div class="carousel-inner">
            @for (int i = 0; i < imageList.Count; ++i)
            {
                <div class="carousel-item @((selectedIndex == i) ? "active" : "")" data-interval="@SLIDE_INTERVAL">
                    <img src=@imageList[i] class="d-block w-100" alt="@i">
                </div>
            }
        </div>
        <a class="carousel-control-prev" @onclick="SlidePreviousButtonClick" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" @onclick="SlideNextButtonClick" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>
</BFUStack>

@code 
{
    const int SLIDE_INTERVAL = 5000;

    [Inject]
    ThemeProvider ThemeProvider { get; set; }

    [Parameter]
    public int ImageCount { get; set; }
    [Parameter]
    public string ImageRootPath { get; set; }

    Timer autoSlideTimer;

    List<string> imageList;

    int selectedIndex = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        imageList = new List<string>();

        for (int i = 1; i <= ImageCount; ++i)
        {
            imageList.Add(Path.Combine(ImageRootPath, $"{i}.png"));
        }

        autoSlideTimer = new Timer(SLIDE_INTERVAL);
        autoSlideTimer.Elapsed += delegate
        {
            SlideNextButtonClick();
        };
        autoSlideTimer.Start();
    }

    public void SlideNextButtonClick()
    {
        ResetTimer();

        selectedIndex = (selectedIndex == (ImageCount - 1)) ? 0 : (selectedIndex + 1);
    }

    public void SlidePreviousButtonClick()
    {
        ResetTimer();

        selectedIndex = ((selectedIndex == 0) ? ImageCount : selectedIndex) - 1;
    }

    private void ResetTimer()
    {
        autoSlideTimer.Stop();
        autoSlideTimer.Interval = SLIDE_INTERVAL;
        autoSlideTimer.Start();
    }
}
